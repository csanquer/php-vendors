#!/usr/bin/env php
<?php
/*
 * This file is part of the php-vendors.
 *
 * (c) 2011-2012 Fabien Potencier <fabien@symfony.com> for original Symfony 2.0 vendors script 
 * (c) 2012 Charles Sanquer <charles.sanquer@spyrit.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

set_time_limit(0);

if (substr(strtolower(php_sapi_name()), 0, 3) != 'cli' )
{
    die('You cannot use this script.');
}

if (!defined('DS'))
{
    define('DS', DIRECTORY_SEPARATOR);
}

/******************************************************************************/
function isWindows()
{
    return strpos(strtolower(php_uname('s')), 'windows') !== false;
}

function subDirPath($path)
{
    $dirs = explode('/', $path);
    $paths = array();
    $previous = '';
    foreach ($dirs as $dir)
    {
        $previous = (!is_null($previous) && $previous != '' ? $previous.'/' : '').$dir;
        $paths[] = $previous;
    }
    return $paths;
}

function checkGitignore($path, $gitignoreLines)
{
        $path = preg_replace('/\\\/', '/', $path);
        $paths = subDirPath($path);
        foreach ($gitignoreLines as $line)
        {
            if (in_array($line, $paths))
            {
                return true;
            }
        }
        return false;
}

/******************************************************************************/

abstract class VcsDriver
{
    protected $url;
    protected $dir;
    protected $rev;
    protected $externals;
    
    public function __construct($url, $dir, $rev, $externals = false)
    {
        $this->url = $url;
        $this->dir = $dir;
        $this->rev = is_null($rev) || $rev === '' || $rev === false ? $this->getDefaultRevision() : $rev;
        $this->externals = (bool) $externals;
    }
    
    abstract protected function getDefaultRevision();
    abstract public function install();
    abstract public function update();
    abstract public function getCurrentRevision();
}

class SvnDriver extends VcsDriver
{
    protected function getDefaultRevision()
    {
        return 'HEAD';
    }
    
    protected function getExternalOpt()
    {
        return $this->externals ? '' : ' --ignore-externals' ;
    }
    
    public function install()
    {
        if (!is_dir($this->dir)) 
        {
            if (!system(sprintf('svn checkout'.$this->getExternalOpt().' %s %s', escapeshellarg($this->url), escapeshellarg($this->dir))))
            {
                return false;
            }
        }
        return true;
    }
    
    public function update()
    {
        if (!system(sprintf('cd %s && svn update'.$this->getExternalOpt().' -r %s', escapeshellarg($this->dir), escapeshellarg($this->rev))))
        {
            return false;
        }
        return true;
    }
    
    public function getCurrentRevision()
    {
        ob_start();
        system(sprintf('cd %s && svn log -q -l 1', escapeshellarg($this->dir)));

        if (preg_match('/r(\d+)/m', ob_get_clean(), $matches)) {
            return $matches[1];
        }
        return null;
    }
}

class GitDriver extends VcsDriver
{
    protected function getDefaultRevision()
    {
        return 'origin/HEAD';
    }
    
    protected function getSubmodules()
    {
        if ($this->externals && file_exists($this->dir.DS.'.gitmodules')) 
        {
            echo "> Initializing submodules\n";        
            system(sprintf('cd %s && git submodule update --init --recursive', escapeshellarg($this->dir)));
        }
    }
    
    public function install()
    {
        if (!is_dir($this->dir)) 
        {
            if (!system(sprintf('git clone %s %s', escapeshellarg($this->url), escapeshellarg($this->dir))))
            {
                return false;
            }
        }
        return true;
    }
    
    public function update()
    {
        $status = system(sprintf('cd %s && git status --porcelain', escapeshellarg($this->dir)));
        if (!empty($status)) {
            echo(sprintf('"%s" has local modifications. Please revert or commit/push them before running this command again.', $this->dir).PHP_EOL);
            exit(1);
        }
        $current_rev = system(sprintf('cd %s && git rev-list --max-count=1 HEAD', escapeshellarg($this->dir)));
        if ($current_rev === $this->rev) 
        {
            $this->getSubmodules();
            return true;
        }
        
        if (!system(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($this->dir), escapeshellarg($this->rev))))
        {
            return false;
        }
        $this->getSubmodules();
        return true;
    }
    
    public function getCurrentRevision()
    {
        ob_start();
        system(sprintf('cd %s && git log -n 1 --format=%%H', escapeshellarg($this->dir)));
        $newversion = trim(ob_get_clean());

        ob_start();
        system(sprintf('cd %s && git name-rev --tags --name-only %s', escapeshellarg($this->dir), $newversion));
        // remove trailing ^0 from tags, those are the tags themselves
        $niceversion = preg_replace('/\^0$/', '', trim(ob_get_clean()));

        // undefined is returned in case no name-rev could be found
        if ('undefined' !== $niceversion) 
        {
            return $niceversion;
        }
        return $newversion;
    }
}

/******************************************************************************/

$rootDir = dirname(dirname(__FILE__));

array_shift($argv);
if (!isset($argv[0])) {
    echo(<<<EOF
PHP vendors script management.

Specify a command to run:

    install: install vendors as specified in deps or deps.lock (recommended)
    update:  update vendors to their latest versions (as specified in deps)
    lock:    lock vendors to their current versions

    options
      --reinstall to force reinstalling vendors

EOF
    );
    exit(1);
}

if (!in_array($command = array_shift($argv), array('install', 'update', 'lock'))) {
    echo(sprintf('Command "%s" does not exist.', $command).PHP_EOL);
    exit(1);
}

// versions
$versions = array();
if ('install' === $command && file_exists($rootDir.DS.'deps.lock')) {
    foreach (file($rootDir.DS.'deps.lock', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        $parts = array_values(array_filter(explode(' ', $line)));
        if (2 !== count($parts)) {
            echo(sprintf('The deps version file is not valid (near "%s")', $line).PHP_EOL);
            exit(1);
        }
        $versions[$parts[0]] = $parts[1];
    }
}

$newversions = array();

//get deps
$deps = parse_ini_file($rootDir.DS.'deps', true);

if (false === $deps) {
    echo('The deps file is not valid ini syntax. Perhaps missing a trailing newline?'.PHP_EOL);
    exit(1);
}

//get .gitignore content
if (file_exists($rootDir.DS.'.gitignore'))
{
    $initGitignoreLines = file($rootDir.DS.'.gitignore', FILE_SKIP_EMPTY_LINES | FILE_IGNORE_NEW_LINES);
}
else
{
    $initGitignoreLines = array();
}
$gitignoreLines = $initGitignoreLines;

// default vendor directories
if (isset($deps['default']))
{
    $defaults = $deps['default'];
    if (!isset($defaults['vendor']) || $defaults['vendor'] == '')
    {
        $defaults['vendor'] = 'vendor';
    }
    
    if (!isset($defaults['target']) || $defaults['target'] == '')
    {
        $defaults['target'] = null;
    }
    
    if (!isset($defaults['externals']) || $defaults['externals'] == '')
    {
        $defaults['externals'] = false;
    }
    
    //remove default section from deps
    unset($deps['default']);
}
else
{
    $defaults =array(
        'vendor' => 'vendor',
        'target' => null,
    );
}

$defaultVendorDir = $rootDir.DS.$defaults['vendor'];

if (!checkGitignore($defaults['vendor'], $gitignoreLines))
{
    $gitignoreLines[] = $defaults['vendor'];
}

if (!is_dir($defaultVendorDir)) {
    mkdir($defaultVendorDir, 0777, true);
}

// process each vendor
foreach ($deps as $name => $dep) {
    $dep = array_map('trim', $dep);

    // install dir
    $relativeVendorDir = isset($dep['vendor']) && $dep['vendor'] != '' ? $dep['vendor'] : $defaults['vendor'];
    $targetDir = isset($dep['target']) && $dep['target'] != '' ? $dep['target'] : $defaults['target'];
    $relativeInstallDir = $relativeVendorDir.DS.(!is_null($targetDir) && $targetDir != '' ? $targetDir : $name);
    $installDir = $rootDir.DS.$relativeInstallDir;
    $vendorDir = $rootDir.DS.$relativeVendorDir;
    
    if (!checkGitignore($relativeInstallDir, $gitignoreLines))
    {
        $gitignoreLines[] = $relativeInstallDir;
    }

    if (!is_dir(dirname($installDir))) 
    {
        mkdir(dirname($installDir), 0777, true);
    }
    
    if (in_array('--reinstall', $argv) && realpath($installDir)) {
        if (isWindows()) {
            system(sprintf('rmdir /S /Q %s', escapeshellarg(realpath($installDir))));
        } else {
            system(sprintf('rm -rf %s', escapeshellarg($installDir)));
        }
    }

    // revision
    if (isset($versions[$name])) 
    {
        $rev = $versions[$name];
    } 
    else 
    {
        $rev = isset($dep['version']) ? $dep['version'] : false;
    }
    
    $externals = isset($dep['externals']) ? $dep['externals'] : $defaults['externals'];

    // get vcs driver
    if (isset($dep['git'])) 
    {
        $vcs = new GitDriver($dep['git'], $installDir, $rev, $externals);
    } 
    elseif (isset($dep['svn'])) 
    {
        $vcs = new SvnDriver($dep['svn'], $installDir, $rev, $externals);
    } 
    else 
    {
        exit(sprintf('Either the "git" or "svn" value for the "%s" dependency must be set.', $name));
    }
    
    if ('install' === $command || 'update' === $command) {
        echo PHP_EOL.'> '.('install' === $command ? 'Installing' : 'Updating').' '.$name.PHP_EOL;
        if (!$vcs->install())
        {
            exit(sprintf('Unable to install the "%s" dependency.', $name));
        }
        
        if (!$vcs->update())
        {
            exit(sprintf('Unable to fix the version of "%s" dependency.', $name));
        }
    }

    if ('update' === $command || 'lock' === $command) 
    {
        $newversions[] = $name.' '.$vcs->getCurrentRevision();
    }
}

// updating deps.lock
if ('update' === $command || 'lock' === $command) {
    echo PHP_EOL.'> Updating deps.lock'.PHP_EOL;

    file_put_contents($rootDir.'/deps.lock', implode("\n", $newversions)."\n");
}

//update .gitignore
if ($initGitignoreLines !== $gitignoreLines)
{
    echo PHP_EOL.'> Updating .gitignore'.PHP_EOL;
    $gitignoreText = '';
    foreach ($gitignoreLines as $gitignoreLine)
    {
        $gitignoreText .= $gitignoreLine."\n";
    }
    file_put_contents($rootDir.DS.'.gitignore', $gitignoreText);
}
